name: tfchecks-pr-commenter
on:
  pull_request:
    paths:
    - 'terraform/**'
    - '.github/workflows/terraform-pr-checks.yml'

env:
  AWS_REGION: eu-west-1
  AWS_ACCOUNT_ID: 613963413230
  PR_ROLE: oidc_ro

jobs:
  tfsec:
    name: tfsec PR commenter
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Clone repo
        uses: actions/checkout@v3
      - name: tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.3.1
        with:
          github_token: ${{ github.token }}
          working_directory: 'terraform'
  tflint:
    name: tflint
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - name: Clone repo
        uses: actions/checkout@v3 
      - name: Cache tflint plugin dir
        uses: actions/cache@v3
        with:
          path: ~/.tflint.d/plugins
          key: ubuntu-latest-tflint-${{ hashFiles('.tflint.hcl') }}
      - uses: terraform-linters/setup-tflint@v2
        name: Setup TFLint
        with:
          github_token: ${{ github.token }}
          tflint_version: latest
      - name: Configure AWS credentials for PR role
        uses: aws-actions/configure-aws-credentials@v1-node16
        if: github.event_name == 'pull_request'
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.PR_ROLE }}
          role-session-name: github-demo
          aws-region: ${{ env.AWS_REGION }} 
      - name: Terraform Init
        id: init
        run: terraform -chdir=terraform init
      - name: Show version
        working-directory: terraform
        run: tflint --version
      - name: Init TFLint
        working-directory: terraform
        run: tflint --init
      - name: Run TFLint
        id: tflint
        working-directory: terraform
        run: |
          echo 'TFLINT_OUTPUT<<EOF' >> $GITHUB_ENV
          tflint -f compact --module --force >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          tflint -f compact --module
        continue-on-error: true
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ env.TFLINT_OUTPUT }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('TFlint status')
            })

            // 2. Prepare format of the comment
            const output = `#### TFlint status ðŸ–Œ\`${{ steps.tflint.outcome }}\`

            <details><summary>Show Tflint</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Tflint Status
        if: steps.tflint.outcome == 'failure'
        run: exit 1

    infracost:
      name: Infracost 
      runs-on: ubuntu-latest

      permissions:
        contents: read
        pull-requests: write

      env:
        TF_ROOT: terraform

    steps:
      # If you use private modules, add an environment variable or secret
      # called GIT_SSH_KEY with your private key, so Infracost can access
      # private repositories (similar to how Terraform/Terragrunt does).
      # - name: add GIT_SSH_KEY
      #   run: |
      #     ssh-agent -a $SSH_AUTH_SOCK
      #     mkdir -p ~/.ssh
      #     echo "${{ secrets.GIT_SSH_KEY }}" | tr -d '\r' | ssh-add -
      #     ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        # See https://github.com/infracost/actions/tree/master/setup for other inputs
        # If you can't use this action, see Docker images in https://infracost.io/cicd
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      # Checkout the base branch of the pull request (e.g. main/master).
      - name: Checkout base branch
        uses: actions/checkout@v3
        with:
          ref: '${{ github.event.pull_request.base.ref }}'

      # Generate Infracost JSON file as the baseline.
      - name: Generate Infracost cost estimate baseline
        run: |
          infracost breakdown --path=${TF_ROOT} \
                              --format=json \
                              --out-file=/tmp/infracost-base.json

      # Checkout the current PR branch so we can create a diff.
      - name: Checkout PR branch
        uses: actions/checkout@v3

      # Generate an Infracost diff and save it to a JSON file.
      - name: Generate Infracost diff
        run: |
          infracost diff --path=${TF_ROOT} \
                          --format=json \
                          --compare-to=/tmp/infracost-base.json \
                          --out-file=/tmp/infracost.json

      # Posts a comment to the PR using the 'update' behavior.
      # This creates a single comment and updates it. The "quietest" option.
      # The other valid behaviors are:
      #   delete-and-new - Delete previous comments and create a new one.
      #   hide-and-new - Minimize previous comments and create a new one.
      #   new - Create a new cost estimate comment on every push.
      # See https://www.infracost.io/docs/features/cli_commands/#comment-on-pull-requests for other options.
      - name: Post Infracost comment
        run: |
            infracost comment github --path=/tmp/infracost.json \
                                     --repo=$GITHUB_REPOSITORY \
                                     --github-token=${{github.token}} \
                                     --pull-request=${{github.event.pull_request.number}} \
                                     --behavior=update
