name: terraform-pipeline-pr

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches: [ main ]
    
env:
  AWS_REGION: eu-west-1
  AWS_ACCOUNT_ID: 613963413230
  PR_ROLE: oidc_ro  

permissions:
  id-token: write
  contents: read   
  pull-requests: write

jobs:
  terraform-pipeline:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials for PR role
        uses: aws-actions/configure-aws-credentials@v1-node16
        if: github.event_name == 'pull_request'
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.PR_ROLE }}
          role-session-name: github-demo
          aws-region: ${{ env.AWS_REGION }} 
      - name: Terraform Init
        id: init
        run: terraform -chdir=terraform init
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=terraform validate -no-color
      - name: tflint
        uses: reviewdog/action-tflint@v1.17.2
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review
          filter_mode: "nofilter" # nofilter option checks all files, not just diff
          fail_on_error: true # fail action if errors are found
          level: info  # change to info for more information
          tflint_rulesets: "aws"
          working_directory: terraform
      - name: Terraform fmt
        id: fmt
        run: terraform -chdir=terraform fmt -check
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        run: terraform -chdir=terraform plan tfplan
        continue-on-error: true
      - name: Terraform show
        run: terraform show -no-color tfplan
        id: show
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.show.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
          # - name: Terraform Plan
          #   id: plan
          #   if: github.event_name == 'pull_request'
          #   run: terraform plan -no-color -out plan
          #   continue-on-error: true
          # - name: Terraform show plan output
          #   uses: mathiasvr/command-output@v1
          #   if: github.event_name == 'pull_request' && steps.plan.outcome == 'success'
          #   id: plan_output
          #   with:
          #     run: terraform show -no-color plan
          # - name: Comment on PR on success
          #   uses: actions/github-script@v6
          #   if: github.event_name == 'pull_request' && steps.plan.outcome == 'success'
          #   env:
          #     PLAN: "${{ steps.plan_output.outputs.stdout }}"
          #   with:
          #     script: |
          #       const output = `##### Plan:
          #       ###### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #       ###### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #       ###### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #       <details><summary>Show Plan</summary>
          #       \`\`\`terraform\n
          #       ${process.env.PLAN}
          #       \n\`\`\`
          #       </details>
          #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          #       github.rest.issues.createComment({
          #         issue_number: context.issue.number,
          #         owner: context.repo.owner,
          #         repo: context.repo.repo,
          #         body: output
          #       })
          # - name: Comment on PR on error
          #   uses: actions/github-script@v6
          #   if: github.event_name == 'pull_request' && steps.plan.outcome == 'failure'
          #   with:
          #     github-token: ${{ secrets.GITHUB_TOKEN }}
          #     script: |
          #       const output = `##### Plan:
          #       ###### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #       ###### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #       ###### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          #       github.rest.issues.createComment({
          #         issue_number: context.issue.number,
          #         owner: context.repo.owner,
          #         repo: context.repo.repo,
          #         body: output
          #       })
          # - name: Terraform Plan Status
          #   if: steps.plan.outcome == 'failure'
          #   run: exit 1 
